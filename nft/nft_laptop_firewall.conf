
#!/sbin/nft -f

#
# nftables.conf: laptop firewall
#
# * input chain:
# input chain
# -----------
# * accept traffic related to established connections
# * accept traffic on loopback and wireguard interfaces
# * accept icmp, igmp, ssh, dhcp, mdns, syncthing, and chromecast traffic
# * drop, count, and trace any other inbound traffic
#
# forward chain
# -------------
# * accept and count all forwarded traffic
#
# output chain
# ------------
# * policy accept, until I refine the rules more
# * accept common traffic, and count monitor all output traffic
# * optional trace (disabled)
#
# Commands
# --------
# * `nft list ruleset`: list rules
# * `nft list counters`: to show counter values
# * `nft monitor`: monitor traces
# * `nft monitor trace | grep 'output packet'`: monitor out traffic
# * `nft -f /etc/nftables-reset.conf`: disable filters
#
# Notes
# -----
# * See "log" line in input chain to log dropped input
#

# clear rules
flush ruleset

table inet filter {
  # declare named counters
  counter drop_in_ct_invalid {}
  counter accept_in_ct_rel {}
  counter drop_loop_v4 {}
  counter drop_loop_v6 {}
  counter accept_icmp_v4 {}
  counter accept_icmp_v6 {}
  counter accept_ssh {}
  counter drop_input {}
  counter accept_forward {}
  counter drop_out_ct_invalid {}
  counter accept_out_ct_rel {}
  counter accept_output {}

  # chromecast IPs (chatty in the ephemeral udp port range)
  # src: https://blog.g3rt.nl/allow-google-chromecast-host-firewall-iptables.html
  define CHROMECASTS = {
    192.168.1.153,
    192.168.1.168
  }

  chain input {
    # input policy: drop
    type filter hook input priority 0; policy drop;

    # connection tracker
    ct state invalid counter name drop_in_ct_invalid drop \
      comment "drop ct invalid"
    ct state {established, related} counter name accept_in_ct_rel accept \
      comment "accept ct established, related"

    # accept all loopback/wg/virbr* traffic
    # NOTE: "iifname" is slower than "iif", but it allows name globbing
    # and i want to match on all 3 wireguard ifaces
    iif lo accept comment "accept iif lo"
    iifname "wg*" accept comment "accept iif wg*"
    iifname "virbr*" accept comment "accept iif virbr*"

    # drop loopback traffic on non-loopback interfaces
    iif != lo ip daddr 127.0.0.1/8 counter name drop_loop_v4 drop \
      comment "drop invalid loopback traffic"
    iif != lo ip6 daddr ::1/128 counter name drop_loop_v6 drop \
      comment "drop invalid loopback traffic"

    # accept icmp
    ip protocol icmp counter name accept_icmp_v4 accept \
      comment "accept icmp v4"
    ip6 nexthdr icmpv6 counter name accept_icmp_v6 accept \
      comment "accept icmp v6"

    # accept igmp
    ip daddr 224.0.0.1 accept comment "accept igmp"

    # accept ssh, dhcp, upnp, pcp, and mdns
    tcp dport 22 counter name accept_ssh accept comment "accept ssh"
    udp dport 68 counter accept comment "accept dhcp"
    udp sport 1900 counter accept comment "accept upnp"
    udp dport 5131 counter accept comment "accept pcp"
    udp dport 5353 counter accept comment "accept mdns"

    # accept syncthing
    # src: https://docs.syncthing.net/users/firewall.html
    tcp dport 22000 counter accept comment "accept syncthing"
    udp dport {21027, 22000} counter accept comment "accept syncthing"

    # accept chromecast traffic
    ip saddr $CHROMECASTS udp dport 32768-65535 \
      accept comment "accept chromecast"

    # drop netgear usb control center/readyshare traffic
    # (src: https://www.speedguide.net/port.php?port=7423)
    udp dport 7423 drop comment "drop netgear readyshare"

    # log drops
    log prefix "DROP "

    # count/monitor drops
    counter name drop_input meta nftrace set 1 comment "drop input"
  }

  # accept all forwarding
  # (TODO: lock this down more)
  chain forward {
    # forward policy: accept
    type filter hook forward priority 0; policy accept;
    counter name accept_forward comment "accept forward"
  }

  # output chain
  # (TODO: the output policy is ACCEPT until I can spend some more
  # time locking this down)
  chain output {
    # output policy: accept
    type filter hook output priority 0; policy accept;

    # connection tracker
    ct state invalid counter name drop_out_ct_invalid drop \
      comment "drop ct invalid"
    ct state {established, related} counter name accept_out_ct_rel accept \
      comment "accept ct established, related"

    # accept all loopback/wg/virbr0 traffic
    # NOTE: "iifname" is slower than "iif", but it allows name globbing
    # and i want to match on all 3 wireguard ifaces
    oif lo accept comment "accept oif lo"
    oifname "wg*" accept comment "accept oif wg*"
    oifname "virbr*" accept comment "accept oif virbr*"

    # drop loopback traffic on non-loopback interfaces
    oif != lo ip daddr 127.0.0.1/8 counter name drop_loop_v4 drop \
      comment "drop invalid loopback traffic"
    oif != lo ip6 daddr ::1/128 counter name drop_loop_v6 drop \
      comment "drop invalid loopback traffic"

    # accept icmp
    ip protocol icmp counter accept comment "accept icmp v4"
    ip6 nexthdr icmpv6 counter accept comment "accept icmp v6"

    # accept igmp
    ip daddr 224.0.0.0/24 accept comment "accept igmp"

    # accept out ssh, http, https, dns, dhcp, https (udp), upnp, pcp, and mdns
    tcp dport {22, 80, 443} counter accept
    udp dport {53, 67, 443, 1900, 5131, 5353} counter accept

    # accept syncthing
    # src: https://docs.syncthing.net/users/firewall.html
    tcp sport 22000 counter accept comment "accept syncthing"
    tcp dport 22000 counter accept comment "accept syncthing"
    udp sport {21027, 22000} counter accept comment "accept syncthing"
    udp dport {21027, 22000} counter accept comment "accept syncthing"

    # accept chromecast traffic
    ip saddr $CHROMECASTS udp dport 32768-65535 \
      accept comment "accept chromecast"

    # accept outbound wireguard traffic
    # FIXME: should probably lock down dest addrs
    udp dport 51818-51820 accept comment "accept wireguard"

    # monitor output accepts
    #
    # Enable this and then monitor outbound traffic like so:
    #   nft monitor trace | grep 'output packet'
    meta nftrace set 1 comment "trace output"

    # count accepts (no trace)
    counter name accept_output comment "accept output"
  }
}
