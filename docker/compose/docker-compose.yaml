# Note any port settings to determine back port
# remove the ports from the traefik controlled service
# Change the router name traefik.http.routers.<routername>.... for each
# Determine for sure what the container port is
# for loadbalancer.server.port=
#
services:
  nginx-site:
    image: nginx:alpine
    user: "${UID}:${GID}"
    volumes:
      - ./nginx-content:/usr/share/nginx/html
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nginx.xaax.dev`)"
      - "traefik.http.routers.nginx.entrypoints=websecure"
      - "traefik.http.routers.nginx.tls=true"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"
    networks:
      - web
  db:
    image: mariadb:10.11
    volumes:
      - dbvol:/var/lib/mysql
    networks:
      - web
    environment:
      MYSQL_ROOT_PASSWORD: pastefy
      MYSQL_DATABASE: pastefy
      MYSQL_USER: pastefy
      MYSQL_PASSWORD: pastefy
  pastefy:
    depends_on:
      - db
    image: interaapps/pastefy:latest
    user: "${UID}:${GID}"
    environment:
      HTTP_SERVER_PORT: 80
      HTTP_SERVER_CORS: "*"
      DATABASE_DRIVER: mysql
      DATABASE_NAME: pastefy
      DATABASE_USER: pastefy
      DATABASE_PASSWORD: pastefy
      DATABASE_HOST: db
      DATABASE_PORT: 3306
      SERVER_NAME: "http://localhost:9999"
      # There is INTERAAPPS, GOOGLE, GITHUB, DISCORD, TWITCH
      OAUTH2_PROVIDER_CLIENT_ID:
      OAUTH2_PROVIDER_CLIENT_SECRET:
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pastefy.rule=Host(`pastefy.xaax.dev`)"
      - "traefik.http.routers.pastefy.entrypoints=websecure"
      - "traefik.http.routers.pastefy.tls=true"
      - "traefik.http.services.pastefy.loadbalancer.server.port=80"
    networks:
      - web

  dozzle:
    container_name: dozzle
    image: amir20/dozzle:latest
    user: "${UID}:${GID}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dozzle.rule=Host(`dozzle.xaax.dev`)"
      - "traefik.http.routers.dozzle.entrypoints=websecure"
      - "traefik.http.routers.dozzle.tls=true"
      - "traefik.http.services.dozzle.loadbalancer.server.port=8080"
    networks:
      - web

  portainer:
    image: portainer/portainer-ce:alpine
    user: "${UID}:${GID}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`port.xaax.dev`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    networks:
      - web

  homer:
    image: b4bz/homer
    container_name: homer
    volumes:
      - ./homer:/www/assets # Make sure your local config directory exists
    environment:
      - INIT_ASSETS=1 # default, requires the config directory to be writable for the container user (see user option)
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.homer.rule=Host(`homer.xaax.dev`)"
      - "traefik.http.routers.homer.entrypoints=websecure"
      - "traefik.http.routers.homer.tls=true"
      - "traefik.http.services.homer.loadbalancer.server.port=8080"
    networks:
      - web

  whoami:
  # A container that exposes an API to show its IP address
    image: traefik/whoami
    user: "${UID}:${GID}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.xaax.dev`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls=true"
      - "traefik.http.services.whoami.loadbalancer.server.port=80"
    networks:
      - web

  filebrowser:
    image: hurlenko/filebrowser
    user: "${UID}:${GID}"
    volumes:
      - ./data:/data
      - ./config:/config
    environment:
      - FB_BASEURL=/filebrowser
    restart: always
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.filebrowser.rule=Host(`files.xaax.dev`)"
      - "traefik.http.routers.filebrowser.entrypoints=websecure"
      - "traefik.http.routers.filebrowser.tls=true"
      - "traefik.http.services.filebrowser.loadbalancer.server.port=8080"
    networks:
      - web

  traefik:
    image: traefik:v3.0
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./etc/certs:/etc/certs:ro
      - ./etc/traefik:/etc/traefik
    networks:
      - web
    command:
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.directory=/etc/traefik"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.xaax.dev`)"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.service=api@internal"
  api:
    container_name: LibreChat
    user: "${UID}:${GID}"
    depends_on:
      - mongodb
      - rag_api
    image: ghcr.io/danny-avila/librechat-dev:latest
    restart: always
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - HOST=0.0.0.0
      - MONGO_URI=mongodb://mongodb:27017/LibreChat
      - MEILI_HOST=http://meilisearch:7700
      - RAG_PORT=${RAG_PORT:-8000}
      - RAG_API_URL=http://rag_api:${RAG_PORT:-8000}
    volumes:
      - type: bind
        source: ./.env
        target: /app/.env
      - ./images:/app/client/public/images
      - ./uploads:/app/uploads
      - ./logs:/app/api/logs
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librechat.rule=Host(`librechat.xaax.dev`)"
      - "traefik.http.routers.librechat.entrypoints=websecure"
      - "traefik.http.routers.librechat.tls=true"
      - "traefik.http.services.librechat.loadbalancer.server.port=3080"
    networks:
      - web
      - default
  mongodb:
    container_name: chat-mongodb
    user: "${UID}:${GID}"
    image: mongo
    restart: always
    volumes:
      - ./mongodb_data:/data/db
    command: mongod --noauth
  meilisearch:
    container_name: chat-meilisearch
    user: "${UID}:${GID}"
    image: getmeili/meilisearch:v1.12.3
    restart: always
    environment:
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_NO_ANALYTICS=true
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY}
    volumes:
      - ./meilisearch_data:/meili_data
  vectordb:
    container_name: vectordb
    image: ankane/pgvector:latest
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    restart: always
    volumes:
      - pgdata2:/var/lib/postgresql/data
  rag_api:
    container_name: rag_api
    image: ghcr.io/danny-avila/librechat-rag-api-dev-lite:latest
    environment:
      - DB_HOST=vectordb
      - RAG_PORT=${RAG_PORT:-8000}
    restart: always
    depends_on:
      - vectordb
    env_file:
      - .env

networks:
  web: {}

volumes:
  dbvol:
  pgdata2:
.
├── docker-compose.yaml
├── docker-compose.yaml.orig
├── etc
│   ├── certs
│   │   ├── domain.cert.pem
│   │   └── private.key.pem
│   └── traefik
│       └── tls.yaml
├── nginx-content
│   └── index.html
└── remove-root-dirs.sh

5 directories, 7 files
